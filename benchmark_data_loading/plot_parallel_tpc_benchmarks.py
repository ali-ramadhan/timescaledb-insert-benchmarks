import argparse
from pathlib import Path

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt

def parse_args():
    parser = argparse.ArgumentParser(
        description="Plot results from timescaledb-parallel-copy benchmarks."
    )

    parser.add_argument(
        "--benchmarks-file",
        type=str,
        help="Filepath to a benchmarks CSV file generated by parse_tpc_logs.py.",
        required=True
    )
    
    return parser.parse_args()

def main(args):
    df = pd.read_csv(args.benchmarks_file)

    def plot(ax, table_type, num_workers, rate, label):
        dfq = df.query(f"table_type == '{table_type}' and num_workers == {num_workers}").sort_values(by="total_rows")
        rows_inserted = dfq["total_rows"] / 1e6
        insert_rate = dfq[rate]
        ax.plot(rows_inserted, insert_rate, label=label)

    fig, ax = plt.subplots(figsize=(8, 6))

    for table_type in ["regular", "hyper"]:
        for n in [1, 2, 4, 8, 16, 32]:
            plot(ax, table_type, n, "overall_rate", label=f"{table_type} table ({n} workers)")

    # plot(ax, "regular", 1, "overall_rate", label="regular table (1 worker)")
    # plot(ax, "regular", 32, "overall_rate", label="regular table (32 workers)")
    # plot(ax, "hyper", 1, "overall_rate", label="hypertable (1 worker)")
    # plot(ax, "hyper", 32, "overall_rate", label="hypertable (32 workers)")

    ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))

    ax.set_xlabel("Rows inserted (millions)")
    ax.set_ylabel("Insert rate (rows per second)")
    ax.legend(frameon=False, ncol=2, loc="upper center", bbox_to_anchor=(0.5, 1.15))
    
    output_filename = Path(args.benchmarks_file).with_suffix(".png")
    plt.savefig(output_filename, dpi=200, transparent=False)

if __name__ == "__main__":
    main(parse_args())
